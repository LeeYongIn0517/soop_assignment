package com.soop_assignment.app.data.entity

import com.google.gson.annotations.SerializedName

data class RepoMetaData(
    @SerializedName("id") val id: Int,
    @SerializedName("node_id") val nodeId: String,
    @SerializedName("name") val name: String,
    @SerializedName("full_name") val fullName: String,
    @SerializedName("private") val isPrivate: Boolean,
    @SerializedName("owner") val owner: Owner,
    @SerializedName("html_url") val htmlUrl: String,
    @SerializedName("description") val description: String?,
    @SerializedName("fork") val isFork: Boolean,
    @SerializedName("url") val url: String,
    @SerializedName("created_at") val createdAt: String,
    @SerializedName("updated_at") val updatedAt: String,
    @SerializedName("pushed_at") val pushedAt: String,
    @SerializedName("git_url") val gitUrl: String,
    @SerializedName("ssh_url") val sshUrl: String,
    @SerializedName("clone_url") val cloneUrl: String,
    @SerializedName("svn_url") val svnUrl: String,
    @SerializedName("homepage") val homepage: String?,
    @SerializedName("size") val size: Int,
    @SerializedName("stargazers_count") val stargazersCount: Int,
    @SerializedName("watchers_count") val watchersCount: Int,
    @SerializedName("language") val language: String?,
    @SerializedName("has_issues") val hasIssues: Boolean,
    @SerializedName("has_projects") val hasProjects: Boolean,
    @SerializedName("has_downloads") val hasDownloads: Boolean,
    @SerializedName("has_wiki") val hasWiki: Boolean,
    @SerializedName("has_pages") val hasPages: Boolean,
    @SerializedName("has_discussions") val hasDiscussions: Boolean,
    @SerializedName("forks_count") val forksCount: Int,
    @SerializedName("mirror_url") val mirrorUrl: String?,
    @SerializedName("archived") val isArchived: Boolean,
    @SerializedName("disabled") val isDisabled: Boolean,
    @SerializedName("open_issues_count") val openIssuesCount: Int,
    @SerializedName("license") val license: String?,
    @SerializedName("allow_forking") val allowForking: Boolean,
    @SerializedName("is_template") val isTemplate: Boolean,
    @SerializedName("visibility") val visibility: String,
    @SerializedName("forks") val forks: Int,
    @SerializedName("open_issues") val openIssues: Int,
    @SerializedName("watchers") val watchers: Int,
    @SerializedName("default_branch") val defaultBranch: String,
    @SerializedName("permissions") val permissions: Permissions,
    @SerializedName("temp_clone_token") val tempCloneToken: String,
    @SerializedName("allow_squash_merge") val allowSquashMerge: Boolean,
    @SerializedName("allow_merge_commit") val allowMergeCommit: Boolean,
    @SerializedName("allow_rebase_merge") val allowRebaseMerge: Boolean,
    @SerializedName("allow_auto_merge") val allowAutoMerge: Boolean,
    @SerializedName("delete_branch_on_merge") val deleteBranchOnMerge: Boolean,
    @SerializedName("allow_update_branch") val allowUpdateBranch: Boolean,
    @SerializedName("use_squash_pr_title_as_default") val useSquashPrTitleAsDefault: Boolean,
    @SerializedName("squash_merge_commit_message") val squashMergeCommitMessage: String,
    @SerializedName("squash_merge_commit_title") val squashMergeCommitTitle: String,
    @SerializedName("merge_commit_message") val mergeCommitMessage: String,
    @SerializedName("merge_commit_title") val mergeCommitTitle: String,
    @SerializedName("security_and_analysis") val securityAndAnalysis: SecurityAndAnalysis,
    @SerializedName("network_count") val networkCount: Int,
    @SerializedName("subscribers_count") val subscribersCount: Int
)


